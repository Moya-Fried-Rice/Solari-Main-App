import 'package:flutter/material.dart';
import 'package:aub_ai/aub_ai.dart';

/// Simple GGUF Model Screen using AubAI
/// 
/// This screen demonstrates a basic implementation for GGUF models
/// Note: You'll need to have a GGUF model file available locally
class GGUFModelScreen extends StatefulWidget {
  const GGUFModelScreen({super.key});

  @override
  State<GGUFModelScreen> createState() => _GGUFModelScreenState();
}

class _GGUFModelScreenState extends State<GGUFModelScreen> {
  final TextEditingController _promptController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  
  String _output = '';
  bool _isLoading = false;
  String _statusMessage = 'Ready to test GGUF model';

  @override
  void initState() {
    super.initState();
    _promptController.text = 'Hello, tell me a short story.';
    _statusMessage = 'Demo mode - simulated GGUF model responses';
  }

  @override
  void dispose() {
    _promptController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  /// Generate text using a GGUF model with basic prompt
  Future<void> _generateText() async {
    final prompt = _promptController.text.trim();
    if (prompt.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please enter a prompt')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
      _output = '';
      _statusMessage = 'Generating response...';
    });

    try {
      // This is the actual AubAI implementation (commented out for demo)
      /*
      await talkAsync(
        filePathToModel: '/path/to/your/model.gguf',
        promptTemplate: PromptTemplate(
          label: 'Simple Chat',
          template: prompt,
          contextSize: 2048,
          randomSeedNumber: 42,
        ),
        onTokenGenerated: (String token) {
          setState(() {
            _output += token;
          });
          
          // Auto-scroll to bottom
          WidgetsBinding.instance.addPostFrameCallback((_) {
            if (_scrollController.hasClients) {
              _scrollController.animateTo(
                _scrollController.position.maxScrollExtent,
                duration: const Duration(milliseconds: 100),
                curve: Curves.easeOut,
              );
            }
          });
        },
      );
      */
      
      // Simulate AI response for demo
      await _simulateAIResponse(prompt);
      
    } catch (e) {
      setState(() {
        _output = 'Error: $e';
        _statusMessage = 'Error occurred during generation';
      });
    } finally {
      setState(() {
        _isLoading = false;
        _statusMessage = 'Generation complete';
      });
    }
  }

  /// Simulate AI response for demonstration
  Future<void> _simulateAIResponse(String prompt) async {
    final responses = [
      "Hello! I'm a simulated AI response. In a real implementation, I would be generated by a GGUF model running locally through AubAI.",
      "This is a demonstration of how GGUF models work with AubAI. The actual response would be generated token by token.",
      "I understand you asked: '$prompt'. With a real GGUF model, I could provide contextual and intelligent responses.",
      "AubAI supports running GGUF models locally on your device without internet connection. Pretty cool!",
    ];
    
    final response = responses[prompt.hashCode % responses.length];
    
    // Simulate token-by-token generation
    for (int i = 0; i < response.length; i++) {
      await Future.delayed(const Duration(milliseconds: 50));
      setState(() {
        _output += response[i];
      });
      
      // Auto-scroll to bottom
      WidgetsBinding.instance.addPostFrameCallback((_) {
        if (_scrollController.hasClients) {
          _scrollController.animateTo(
            _scrollController.position.maxScrollExtent,
            duration: const Duration(milliseconds: 100),
            curve: Curves.easeOut,
          );
        }
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('GGUF Model Demo'),
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // Status Card
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Text(
                      'AubAI GGUF Demo',
                      style: Theme.of(context).textTheme.titleMedium,
                    ),
                    const SizedBox(height: 8),
                    Text(
                      _statusMessage,
                      textAlign: TextAlign.center,
                      style: TextStyle(
                        color: Colors.grey[600],
                        fontSize: 14,
                      ),
                    ),
                    const SizedBox(height: 12),
                    const Row(
                      mainAxisAlignment: MainAxisAlignment.center,
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue),
                        SizedBox(width: 8),
                        Text('Demo Mode - Simulated Responses'),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Input Section
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    TextField(
                      controller: _promptController,
                      decoration: const InputDecoration(
                        labelText: 'Enter your prompt',
                        hintText: 'Ask the AI something...',
                        border: OutlineInputBorder(),
                      ),
                      maxLines: 3,
                    ),
                    const SizedBox(height: 12),
                    ElevatedButton.icon(
                      onPressed: !_isLoading ? _generateText : null,
                      icon: _isLoading 
                        ? const SizedBox(
                            width: 16, 
                            height: 16, 
                            child: CircularProgressIndicator(strokeWidth: 2),
                          )
                        : const Icon(Icons.send),
                      label: Text(_isLoading ? 'Generating...' : 'Generate Response'),
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // Output Section
            Expanded(
              child: Card(
                child: Padding(
                  padding: const EdgeInsets.all(16.0),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'AI Response',
                        style: Theme.of(context).textTheme.titleMedium,
                      ),
                      const SizedBox(height: 8),
                      Expanded(
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.all(12),
                          decoration: BoxDecoration(
                            border: Border.all(color: Colors.grey.shade300),
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: SingleChildScrollView(
                            controller: _scrollController,
                            child: Text(
                              _output.isEmpty ? 'AI response will appear here...' : _output,
                              style: const TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 14,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
            
            // Instructions Card
            Card(
              color: Colors.blue.shade50,
              child: Padding(
                padding: const EdgeInsets.all(12.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'How to use with real GGUF models:',
                      style: Theme.of(context).textTheme.titleSmall,
                    ),
                    const SizedBox(height: 4),
                    const Text(
                      '1. Download GGUF models from HuggingFace\n'
                      '2. Use talkAsync() from aub_ai package\n'
                      '3. Configure PromptTemplate for your model\n'
                      '4. Handle onTokenGenerated callbacks',
                      style: TextStyle(fontSize: 12),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
}
